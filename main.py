from aiogram import Bot, Dispatcher, executor
import os
from dotenv import load_dotenv
from aiogram.types import Message, CallbackQuery, LabeledPrice
from work import *
from keyboards import *
load_dotenv()


bot = Bot(os.getenv('TOKEN'))

dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    chat_id = message.from_user.id
    """–ù–∞–¥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
    –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - –ø–æ–∫–∞–∑–∞—Ç—å –µ–º—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = first_select_user(chat_id)
    if user:  # –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π?
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await main_menu(message)
    else:
        text = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name} –≤–∞—Å –ø—Ä–∏–≤–µ—Å—Ç–≤—É–π–µ—Ç The World Garb
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üëáüëáüëá"""
        await message.answer(text, reply_markup=generate_phone_number())


@dp.message_handler(content_types=['contact'])
async def register(message: Message):
    chat_id = message.from_user.id
    full_name = message.from_user.full_name
    phone = message.contact.phone_number
    register_user(chat_id, full_name, phone)
    create_cart(chat_id)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await main_menu(message)


async def main_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=generate_main_menu())


# @dp.message_handler(lambda message: '‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
@dp.message_handler(regexp=r'‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def show_categories(message: Message):
    categories = get_categories()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ', reply_markup=generate_categories_menu(categories))


@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products(call: CallbackQuery):
    # category_1
    _, category_id = call.data.split('_')
    category_id = int(category_id)
    products = get_products_by_category(category_id)
    message_id = call.message.message_id
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: ',
                                chat_id=call.message.chat.id,
                                message_id=message_id,
                                reply_markup=generate_products_menu(products))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def get_to_main_menu(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    categories = get_categories()
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=generate_categories_menu(categories))


@dp.callback_query_handler(lambda call: 'product' in call.data)
async def show_detail_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    # product_1
    _, product_id = call.data.split('_')
    product_id = int(product_id)
    product = get_product(product_id)
    # print(product)
    await bot.delete_message(chat_id, message_id)
    with open(product[5], mode='rb') as img:
        caption = f'''{product[2]}

–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}

–¶–µ–Ω–∞: {product[3]}

–í—ã–±—Ä–∞–Ω–æ: 1 - {product[3]}'''
        await bot.send_photo(chat_id=chat_id,
                             photo=img,
                             caption=caption,
                             reply_markup=generate_product_buttons(product[0], product[1]))


@dp.callback_query_handler(lambda call: 'change' in call.data)
async def change_quantity(call: CallbackQuery):
    _, product_id, quantity = call.data.split('_')
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    product = get_product(product_id)
    caption = f'''{product[2]}

–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}

–¶–µ–Ω–∞: {product[3]} —Å—É–º

–í—ã–±—Ä–∞–Ω–æ: {quantity} - {product[3] * int(quantity)} —Å—É–º'''
    if int(quantity) >= 1:
        await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=caption,
                                       reply_markup=generate_product_buttons(product[0], product[1], int(quantity)))


@dp.callback_query_handler(lambda call: 'back' in call.data)
async def back_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    _, category_id = call.data.split('_')
    products = get_products_by_category(category_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ',
                           reply_markup=generate_products_menu(products))


@dp.callback_query_handler(lambda call: call.data.startswith('cart'))
async def add_product_cart(call: CallbackQuery):  # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    chat_id = call.message.chat.id
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)
    cart_id = get_user_cart_id(chat_id)  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    product = get_product(product_id)  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    final_price = product[3] * quantity  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫–∏–Ω—É—Ç—å —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –±—ã–ª - —Ç–æ –æ–±–Ω–æ–≤–∏–º –µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if insert_or_update_cart_product(cart_id, product[2], quantity, final_price):
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–π - –≤–µ—Ä–Ω—É–ª–æ—Å—å True
        await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await bot.answer_callback_query(call.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(regexp=r'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message, edit_message=False):  # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ—Ä–∑–∏–Ω—ã
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        update_total_product_total_price(cart_id)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω—ã
    except Exception as e:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Ç–æ –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(e)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        return

    total_products, total_price = get_total_products_price(cart_id)

    cart_products = get_cart_products(cart_id)  # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    i = 0
    for cart_product_id, product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products == None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {0 if total_price == None else total_price}'''

    if edit_message:
        await bot.edit_message_text(text, chat_id, message.message_id,
                                    reply_markup=generate_cart_product(cart_id, cart_products))
    else:
        await bot.send_message(chat_id, text,
                               reply_markup=generate_cart_product(cart_id, cart_products))


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete(call: CallbackQuery):
    # delete_1
    _, cart_product_id = call.data.split('_')
    cart_product_id = int(cart_product_id)

    delete_cart_product(cart_product_id)
    await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    await show_cart(message=call.message, edit_message=True)


@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, cart_id = call.data.split('_')
    cart_id = int(cart_id)
    total_products, total_price = get_total_products_price(cart_id)

    cart_products = get_cart_products(cart_id)  # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    text = '–í–∞—à –∑–∞–∫–∞–∑: \n\n'
    i = 0
    for cart_product_id, product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {0 if total_price is None else total_price}'''

    await bot.send_invoice(
        chat_id=chat_id,
        title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
        description=text,
        payload='bot-defined invoice payload',
        provider_token='398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065',
        currency='UZS',
        prices=[
            LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
            LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1500000)
        ]
    )
    add_order(cart_id, chat_id, text, total_price)
    await bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω')
    print(text)


@dp.message_handler(regexp=r'üìí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
async def history(message: Message):
    chat_id = message.chat.id
    history = select_order(chat_id)
    # print(history)
    # for order_id, order_description, order_price, user_id in history:
    for item in history:

        # print("=====")
        # print(item)
        text_history = f'''–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:{item[0]}
        {item[3]}'''
        await bot.send_message(chat_id, text_history)


executor.start_polling(dp)
